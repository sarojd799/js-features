


A data descriptor is a property that has a value, which may or may not be writable. 
An accessor descriptor is a property described by a getter-setter pair of functions

You can't define both at the same time

const o = {};

Object.defineProperty(o, 'a', {
  value: 37,
  writable: true,
  enumerable: true,
  configurable: true,
  get() { return 33; },
});//Invalid property descriptor. Cannot both specify accessors and a value or writable attribute, 


1. Object.seal() seals an object

Sealing an object 
    1.prevents extensions
    2.makes existing properties non-configurable

configurable:-
-------------
when this is set to false,

the type of this property cannot be changed between data property and accessor property, 
and the property may not be deleted, 
and other attributes of its descriptor cannot be changed (however, if it's a data descriptor 
with writable: true, the value can be changed, and writable can be changed to false).

const object1 = {greet:"hi", count: 0};

console.log(Object.getOwnPropertyDescriptor(object1,'greet'))

const obj = Object.seal(object1)

console.log(Object.getOwnPropertyDescriptor(object1,'greet'))

console.log(Object.isSealed(obj)); //true

console.log(Object.isSealed(object1)); //true

object1.test = true; //not added to object1

obj.test = true; //prop not added to obj

console.log(object1,obj)

console.log(object1 === obj) //true

Object.defineProperty(obj, 'ohai', {
  value: 17
}); // TypeError: Cannot define property ohai, object is not extensible


===============================================================================================414
2.Object.freeze()

i.Freezing an object prevents extensions
2.makes existing properties non-writable
3.makes object non-configurable

const o = Object.freeze(obj);

Object.isFrozen(obj); //true

o === obj; //true

3.Object.prototype.constructor:-

The constructor property returns a reference to the Object constructor function that created the instance object. 
Note that the value of this property is a reference to the function itself, not a string containing the function's name.

Any object (with the exception of objects created with Object.create(null))

const arr = [];
arr.constructor = String
arr.constructor === String // true
arr instanceof String // false
arr instanceof Array // true

const arr = [];
Object.hasOwn(arr, "constructor") // false
Object.hasOwn(Object.getPrototypeOf(arr), "constructor") // true

let o = {}
o.constructor === Object // true

let o = new Object
o.constructor === Object // true

let a = []
a.constructor === Array // true

let a = new Array
a.constructor === Array // true

let n = new Number(3)
n.constructor === Number // true


Inheritance:

function Parent(firstName, lastName) {
   this.firstName = firstName || 'fName';
   this.lastName = lastName || 'lName';
}

Parent.prototype.getFullName = function() {
     return this.firstName+ ' '+this.lastName
}


function Child(firstName, lastName,age) {
   Parent.call(this, firstName,lastName)
}

Child.prototype = Object.create(Parent.prototype);

console.dir(Parent.prototype.constructor === Parent);
console.dir(Parent);
console.dir(Parent.prototype);
console.dir(Child);
console.log(new Child('alex','Mercer',24).getFullName());